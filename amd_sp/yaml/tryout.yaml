# QEMU configuration
qemu:
  # Zen generation to emulate
  zen: "Zen2"
  # On-chip bootloader to use
  on_chip_bl_path: "bins/on-chip-bl-Ryzen-Zen2-Desktop"
# Flash informations
flash:
  # Size of flash memory
  size: 0x1000000
  # Base image in flash memory
  base: "bins/PRIME-B450M-K-II-ASUS-4403.BIN.2nd_half"

debug: true
input:
  flash:
    # No initial content
  psp:
    input:
      # Is master maybe
      - addr: 0x10804
        size: 0x4
    fixed:
      - addr: 0x108ae
        val: 0xFFFF
      - addr: 0x108c4
        val: 0x0
  mailbox: true


# Harness
harness:
  # cold_boot call to x86_workloop #
  # start: 0x116c
  # Start of psp_recovery_mode_workloop in cold boot to SecOS
  start: 0xd302
  sinks:
    # sts_report_to_x86_hang_on_error in loop
    - 0x7274
    # exited workloop
    - 0x93f0
    # wait_for_irq_or_work waiting for interrupt
    - 0x0210
    # Starting SecOS
    - 0xD2EE


# Tunnels describe any fixup that has to happen during execution
# at a certain address
# Jumps are very finicky
# Jump to early and the TB will crash
# Jump to late and there will be Data Aborts
# The positions can change when upgrading QEMU
tunnels:
  # fix function in x86_workloop
  - addr: 0x9236
    action: SetConstant
    target: R0
    value: 0x0
  # overwrite of 0x100ac
  - addr: 0x6988
    action: SetConstant
    target: R0
    value: 0x1
  # SKIP ABL
  - addr: 0x2938   # When the overwriting happens
    action: Jump
    source: 0x2a1c # what gets overwritten
    target: 0x2a2a # where to jump to
  # # SKIP JUMP TO SECOS -> Go to recovery mailbox
  - addr: 0x151a
    action: Jump
    source: 0xd2e8
    target: 0xd2fc

  # Debug error state
  - addr: 0xa9a4
    action: LogRegister
    target: LR
  - addr: 0x7272
    action: LogRegister
    target: R1
  - addr: 0xfca
    action: LogRegister
    target: R5
  - addr: 0x1048
    action: LogRegister
    target: R1
  - addr: 0x907a
    action: LogMemory
    target: 0x3010570
    size: 4
  - addr: 0xfac
    action: LogMemory
    target: 0x3010570
    size: 4


crashes:
  # Breakpoints as crashes
  breakpoints:
  mmap:
    no_exec:
    # TODO: figure out relevant regions
    ccp_memcopy_addr: 0x0
    forbidden_memcopies:
    forbidden_writes:
  x86:
    start: 0xfffd00000000
    end: 0xffffffffffff

# Snapshotting behaviour:
# - Use enum for "default", "on_crash", "periodically":
#   ["SuperLazy", "Lazy", "RustSnapshot", "HardReset"]
# - "period":
#   number of testcases before running state_rest "periodically"
snapshot:
  default: "SuperLazy"
  on_crash: "HardReset"
  periodically: "RustSnapshot"
  period: 100000
